
services:
  postgres:
    image: postgres:15  # Utilise PostgreSQL version 15
    restart: always  # Redémarre automatiquement en cas d'erreur
    env_file:
      - .env  # Charge les variables d'environnement
    environment:
      POSTGRES_USER: ${DEV_POSTGRES_USER}  # Nom d'utilisateur de la base de données
      POSTGRES_PASSWORD: ${DEV_POSTGRES_PASSWORD}  # Mot de passe de la base de données
      POSTGRES_DB: ${DEV_POSTGRES_DB}  # Nom de la base de données
    ports:
      - "5432:5432"  # Réexpose PostgreSQL pour DBeaver et outils externes
    volumes:
      - db_data:/var/lib/postgresql/data  # Persistance des données PostgreSQL
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DEV_POSTGRES_USER} -d ${DEV_POSTGRES_DB}"]
      interval: 10s
      retries: 5
    networks:
      - post_it_network  # Réseau Docker isolé

  flask_app:
    build: .  # Construit l'image depuis le Dockerfile du projet
    container_name: flask_app  # Nom du conteneur Flask
    restart: always  # Redémarre automatiquement en cas de crash
    depends_on:
      postgres:
        condition: service_healthy  # Attend que PostgreSQL soit prêt avant de démarrer
    env_file:
      - .env  # Charge les variables d'environnement
    environment:
      FLASK_ENV: ${FLASK_ENV}  # Mode d'exécution de Flask
      SQLALCHEMY_DATABASE_URI: ${DEV_DATABASE_URL}  # URL de connexion à PostgreSQL
    ports:
      - "5000:5000"  # Expose l'application Flask sur le port 5000
    volumes:
      - .:/app  # Monte le projet local dans le conteneur
    command: >
      sh -c "
      until pg_isready -h postgres -U ${DEV_POSTGRES_USER}; do echo 'Waiting for DB...'; sleep 2; done;
      flask db upgrade && python run.py
      "
    networks:
      - post_it_network  # Réseau privé

volumes:
  db_data:  # Volume pour PostgreSQL

networks:
  post_it_network:  # Réseau Docker isolé
    driver: bridge
