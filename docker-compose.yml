
# services:
#   postgres:
#     image: postgres:14
#     container_name: post_it_db
#     environment:
#       POSTGRES_USER: ${DEV_POSTGRES_USER}
#       POSTGRES_PASSWORD: ${DEV_POSTGRES_PASSWORD}
#       POSTGRES_DB: ${DEV_POSTGRES_DB}
#     volumes:
#       - db_data:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${DEV_POSTGRES_USER}"]
#       interval: 10s
#       retries: 5

#   test_postgres:
#     image: postgres:14
#     container_name: post_it_test_db
#     environment:
#       POSTGRES_USER: ${TEST_POSTGRES_USER}
#       POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}
#       POSTGRES_DB: ${TEST_POSTGRES_DB}
#     volumes:
#       - db_test_data:/var/lib/postgresql/data
#     ports:
#       - "5433:5432"
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U ${TEST_POSTGRES_USER}"]
#       interval: 10s
#       retries: 5

#   db:
#     image: postgres:15

#   flask_app:
#     build: .
#     container_name: flask_app
#     env_file:
#       - .env
#     ports:
#       - "5000:5000"
#     volumes:
#       - .:/app
#     depends_on:
#       postgres:
#         condition: service_healthy
#       test_postgres:
#         condition: service_healthy
#       blackfire:
#         condition: service_started
#     environment:
#       APP_ENV: ${APP_ENV}
#       TESTING_MODE: ${TESTING_MODE}
#       DEV_DATABASE_URL: ${DEV_DATABASE_URL}
#       TEST_DATABASE_URL: ${TEST_DATABASE_URL}
#       DATABASE_URL: ${DEV_DATABASE_URL}
#       SQLALCHEMY_DATABASE_URI: ${DEV_DATABASE_URL}
#       BLACKFIRE_SERVER_ID: ${BLACKFIRE_SERVER_ID}
#       BLACKFIRE_SERVER_TOKEN: ${BLACKFIRE_SERVER_TOKEN}
#     command: sh -c "export TESTING_MODE=true && pytest"
#     entrypoint: >
#       sh -c "
#       echo 'APP_ENV='$APP_ENV;
#       echo 'TESTING_MODE='$TESTING_MODE;

#       if [ \"$TESTING_MODE\" = \"true\" ]; then
#         echo 'Mode test détecté, attente de la base de test...';
#         until pg_isready -h test_postgres -p 5432; do sleep 5; done;
#       else
#         echo 'Mode dev/prod détecté';
#         until pg_isready -h postgres -p 5432; do sleep 5; done;
#       fi;

#       python run.py
#       "

#   blackfire:
#     image: blackfire/blackfire
#     container_name: blackfire_agent
#     environment:
#       BLACKFIRE_SERVER_ID: ${BLACKFIRE_SERVER_ID}
#       BLACKFIRE_SERVER_TOKEN: ${BLACKFIRE_SERVER_TOKEN}

# volumes:
#   db_data:
#   db_test_data:




services:
  postgres:  # Base de données principale (Développement / Production)
    image: postgres:14
    container_name: post_it_db
    environment:
      POSTGRES_USER: ${DEV_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DEV_POSTGRES_PASSWORD}
      POSTGRES_DB: ${DEV_POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DEV_POSTGRES_USER}"]
      interval: 10s
      retries: 5

  test_postgres:  # Base de données dédiée aux tests
    image: postgres:14
    container_name: post_it_test_db
    environment:
      POSTGRES_USER: ${TEST_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}
      POSTGRES_DB: ${TEST_POSTGRES_DB}
    volumes:
      - db_test_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # ⚠ Attention, PostgreSQL tourne sur 5432 dans le conteneur mais est mappé sur 5433
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_POSTGRES_USER}"]
      interval: 10s
      retries: 5

  flask_app:  # Service Flask
    build: .
    container_name: flask_app
    env_file: 
      - .env
    ports:
      - "5000:5000"
    volumes:
      - .:/app  # Monte ton dossier local dans le conteneur
    depends_on:
      postgres:
        condition: service_healthy
      test_postgres:
        condition: service_healthy
    environment:
      APP_ENV: ${APP_ENV}
      TESTING_MODE: $TESTING_MODE
      DEV_DATABASE_URL: ${DEV_DATABASE_URL} 
      TEST_DATABASE_URL: ${TEST_DATABASE_URL}
      DATABASE_URL: ${DEV_DATABASE_URL}
      SQLALCHEMY_DATABASE_URI: ${DEV_DATABASE_URL}
    command: sh -c "export TESTING_MODE=true && pytest"
    entrypoint: >
      sh -c "
      echo 'APP_ENV='$APP_ENV;
      echo 'TESTING_MODE='$TESTING_MODE;

      if [ \"$TESTING_MODE\" = \"true\" ]; then
        echo 'Mode test détecté, attente de la base de test...';
        until pg_isready -h test_postgres -p 5432; do sleep 5; done;
      else
        echo 'Mode dev/prod détecté';
        until pg_isready -h postgres -p 5432; do sleep 5; done;
      fi;
      
      echo 'DEV_DATABASE_URL=' $DEV_DATABASE_URL;
      python run.py
      "

  test_ui:
    build: .
    depends_on:
      - flask_app
    environment:
      - BASE_URL=http://flask_app:5000
    command: python -m pytest tests/ui -v

volumes:
  db_data:
  db_test_data:
